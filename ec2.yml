Description: >
  Marco Graupmann - stupid ec2 env

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "ci-cd-test-env"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: "10.0.0.0/24"

  ec2AMI:
    Description: Which AMI we want to use
    Type: String
    Default: "ami-0b1deee75235aa4bb"

  InstType:
    Description: Which Instance Type  we want to use
    Type: String
    Default: "t2.micro"

Resources:
  #setup vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc
        - Key: createdBy
          Value: Marco Graupmann
        - Key: Project
          Value: Udacity
        - Key: Environment
          Value: sandbox

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: createdBy
          Value: Marco Graupmann
        - Key: Project
          Value: Udacity
        - Key: Environment
          Value: sandbox

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} InternetGateway
        - Key: createdBy
          Value: Marco Graupmann
        - Key: Project
          Value: Udacity
        - Key: Environment
          Value: sandbox

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

 #We also need routing tables - here for public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
        - Key: createdBy
          Value: Marco Graupmann
        - Key: Project
          Value: Udacity
        - Key: Environment
          Value: sandbox

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh from public
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ec2AMI
      InstanceType: !Ref InstType
      KeyName: test-ec2
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CICDInstance'
        - Key: createdBy
          Value: Marco Graupmann
        - Key: Project
          Value: Udacity
        - Key: Environment
          Value: sandbox
        - Key: test
          Value: testkey

Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  CICDInstancePublicIp:
    Description: 'CICDInstance Public IP'
    Value: !Sub ${EC2Instance.PublicIp}
